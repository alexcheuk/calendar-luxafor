import {
  app,
  BrowserWindow,
  Tray,
  Menu,
  nativeImage,
  ipcMain,
  powerSaveBlocker,
} from "electron";
import path from "path";
import { off, startupSequence, updateLED } from "./calendar-led";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let tray: Tray;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

powerSaveBlocker.start("prevent-app-suspension");

const createTray = () => {
  const trayicon = nativeImage.createFromPath(
    path.resolve(__dirname, "assets/logo.png")
  );

  tray = new Tray(trayicon.resize({ width: 16 }));

  tray.setContextMenu(
    Menu.buildFromTemplate([
      {
        label: "Progress: Not running",
      },
      {
        label: "Start",
        click: function () {
          start();
        },
      },
      {
        label: "Quit",
        click: function () {
          app.quit();
        },
      },
    ])
  );

  start();
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 150,
    width: 400,
    webPreferences: {
      nodeIntegration: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  if (!tray) {
    createTray();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.dock.hide();
app.on("ready", createTray);
// app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
// app.on("window-all-closed", () => {
//   if (process.platform !== "darwin") {
//     app.dock.hide();
//   }
// });

// app.on("activate", () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//     createWindow();
//   }
// });

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

let intervalRef: NodeJS.Timeout;
let isRunning = false;

const start = async () => {
  tray.setContextMenu(
    Menu.buildFromTemplate([
      {
        label: "Progress: Running",
      },
      {
        label: "Stop",
        click: function () {
          stop();
        },
      },
      {
        label: "Quit",
        click: function () {
          app.quit();
        },
      },
    ])
  );

  await startupSequence();
  startSync();
};

const stop = () => {
  isRunning = false;
  clearTimeout(intervalRef);

  tray.setContextMenu(
    Menu.buildFromTemplate([
      {
        label: "Progress: Not running",
      },
      {
        label: "Start",
        click: function () {
          start();
        },
      },
      {
        label: "Quit",
        click: function () {
          app.quit();
        },
      },
    ])
  );

  off();
};

const startSync = () => {
  try {
    updateLED();
  } catch (e) {}

  intervalRef = setTimeout(() => {
    startSync();
  }, 5000);
};

ipcMain.on("start", (event) => {
  isRunning = true;
  start();

  event.reply("started");
});

ipcMain.on("stop", (event) => {
  stop();
  event.reply("ended");
});

ipcMain.on("get-status", (event) => {
  event.returnValue = isRunning;
});

app.on("before-quit", stop);
